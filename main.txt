package main

import (
	"fmt"

	"github.com/google/uuid"
	"github.com/pluto0-dev/go-example/poommipat"
)

func main() {
	id := uuid.New()
	fmt.Println("Hello World")
	fmt.Printf("UUID: %s", id)
	poommipat.SayHelloPoommipat()
}
-------------------------------------------------------------------------------
package main

import (
	"fmt"
)

func main() {
	var score int = 62
	var grade string
	if score >= 80 {
		grade = "A"
	} else if score >= 70 {
		grade = "B"
	} else if score >= 60 {
		grade = "C"
	} else {
		grade = "F"
	}
	fmt.Printf("Your Grade is %s", grade)
}
----------------------------------------------------
\package main

import (
	"fmt"
)

func main() {
	var dayOfWeek = 3
	switch dayOfWeek {
	case 1:
		fmt.Println("mobday")
	case 2:
		fmt.Println("tuseday")
	case 3:
		fmt.Println("Wednesday")
	case 4:
		fmt.Println("Thursday")
	case 5:
		fmt.Println("Friday")
	case 6:
		fmt.Println("Saturday")
	case 7:
		fmt.Println("Sunday")
	}
}
---------------------------------------------
package main

import (
	"fmt"
)

func main() {
	for i := 1; i < 10; i++ {
		fmt.Printf("Number: %d \n", i)
	}
}
---------------------------------------------------------
package main

import (
	"fmt"
)

func main() {
	i := 1
	for {
		fmt.Printf("number : %d \n", i)
		i++
		if i >= 10 {
			break
		}
	}
}
---------------------------------------------------
package main

import (
	"fmt"
)

func main() {
	i := 1
	for i <= 10{
		fmt.Printf("number : %d \n", i)
		i++
	}
}
---------------------------------------------------
package main

import (
	"fmt"
)

func main() {
	var myArray [3]int
	myArray[0] = 10
	myArray[1] = 20
	myArray[2] = 30
	fmt.Print(myArray)
}
-----------------------
package main

import (
  "fmt"
)

func main() {
  mySlice := []int{10, 20, 30, 40, 50} // A slice of integers

  fmt.Println(mySlice)          // Output: [10 20 30 40 50]
  fmt.Println(len(mySlice))     // Length of the slice: 5
  fmt.Println(cap(mySlice))     // Capacity of the slice: 5

  // Slicing a slice
  subSlice := mySlice[1:3]      // Slice from index 1 to 2
  fmt.Println(subSlice)         // Output: [20 30]
}
---------------------------------------
package main

import (
    "fmt"
)

func main() {
  var mySlice []int // Declared but not initialized

  // Appending data to the slice
  mySlice = append(mySlice, 10)
  mySlice = append(mySlice, 20, 30)

  fmt.Println(mySlice) // Output: [10 20 30]
}
--------------------------------
package main

import (
    "fmt"
)

func main() {
  var myArray [3]int // An array of 3 integers
  myArray[0] = 10    // Assign values
  myArray[1] = 20
  myArray[2] = 30

  // Converting array to slice
  mySlice := myArray[:]

  // Resizing slice by appending new elements
  mySlice = append(mySlice, 40, 50)

  fmt.Println(mySlice) // Output will show a slice with 5 elements: [10 20 30 40 50]
}
----------------------------
package main

import (
	"fmt"
)

func main() {
	myMap := make(map[string]int)

	// Add key-value pairs to the map
	myMap["apple"] = 5
	myMap["banana"] = 10
	myMap["orange"] = 8

	// Access and print a value for a key
	fmt.Println("Apples:", myMap["apple"])

	// Update the value for a key
	myMap["banana"] = 12

	// Delete a key-value pair
	delete(myMap, "orange")

	// Iterate over the map
	for key, value := range myMap {
		fmt.Printf("%s -> %d\n", key, value)
	}

	// Checking if a key exists
	val, ok := myMap["pear"]
	if ok {
		fmt.Println("Pear's value:", val)
	} else {
		fmt.Println("Pear not found inmap")
	}
}
--------------------------------------------------
package main

import "fmt"

// Define a struct type
type Student struct {
	Name    string
	Weight  int
  	Height  int
  	Grade   string
}

func main() {
	// Create an instance of the Student struct
	var student1 Student
	student1.Name = "Mikelopster"
	student1.Weight = 60
  	student1.Height = 180
  	student1.Grade = "F"

	// Print struct values
	fmt.Println(student1)
}
----------------------------
package main

import "fmt"

// Define a struct type
type Student struct {
	Name   string
	Weight int
	Height int
	Grade  string
}

func main() {
	// Create an array of Student structs
	var students [3]Student

	// Initialize the first student
	students[0] = Student{
		Name:   "Mikelopster",
		Weight: 60,
		Height: 180,
		Grade:  "F",
	}

	// Initialize the second student
	students[1] = Student{
		Name:   "Alice",
		Weight: 55,
		Height: 165,
		Grade:  "A",
	}

	// Initialize the third student
	students[2] = Student{
		Name:   "Bob",
		Weight: 68,
		Height: 175,
		Grade:  "B",
	}

	// Print array of structs
	fmt.Println(students)
}
*************************
package main

import "fmt"

// Define the Student struct
type Student struct {
	Name   string
	Weight int
	Height int
	Grade  string
}

func main() {
	// Create a map with string keys and Student struct values
	students := make(map[string]Student)

	// Add Student structs to the map
	students["st01"] = Student{Name: "Mikelopster", Weight: 60, Height: 180, Grade: "F"}
	students["st02"] = Student{Name: "Alice", Weight: 55, Height: 165, Grade: "A"}
	students["st03"] = Student{Name: "Bob", Weight: 68, Height: 175, Grade: "B"}

	// Print the map
	fmt.Println("Students Map:", students)

	// Access and print a specific student by key
	fmt.Println("Student st01:", students["st01"])
}
--------------------------------
package main

import "fmt"

// Define a struct type
type Person struct {
	Name    string
	Age     int
	Address Address
}

// Another struct type used in Person
type Address struct {
	Street  string
	City    string
	ZipCode int
}

func main() {
	// Create an instance of the Person struct
	var person Person
	person.Name = "Alice"
	person.Age = 30
	person.Address = Address{
		Street:  "123 Main St",
		City:    "Gotham",
		ZipCode: 12345,
	}

	// Alternative way to initialize a struct
	bob := Person{
		Name: "Bob",
		Age:  25,
		Address: Address{
			Street:  "456 Elm St",
			City:    "Metropolis",
			ZipCode: 67890,
		},
	}

	// Print struct values
	fmt.Println(person)
	fmt.Println(bob)
}
-----------------------
package main

import "fmt"

func sayHello(name string) {
  fmt.Printf("Hello %s\n", name)
}

func main() {
  sayHello("Nick")
  sayHello("poommipat")
}
-------------------------------------------------
package main

import (
	"fmt"
)

// Define the Student struct
type Student struct {
	Firstname string
	Lastname  string
}

// Method with a receiver of type Student
// This method returns the full name of the student
func (s Student) FullName() string {
	return s.Firstname + " " + s.Lastname
}

func main() {
	student := Student{
		Firstname: "Nick",
		Lastname:  "Poommipat",
	}

	// Call the FullName method on the Student instance
	fullName := student.FullName()
	fmt.Println("Full Name of the student:", fullName)
}
-------------------
package main

import "fmt"

// Speaker interface
type Speaker interface {
	Speak() string
}

// Dog struct
type Dog struct {
	Name string
}

// Dog's implementation of the Speaker interface
func (d Dog) Speak() string {
	return "Woof!"
}

// Person struct
type Person struct {
	Name string
}

// Person's implementation of the Speaker interface
func (p Person) Speak() string {
	return "Hello!"
}

// function that accepts Speaker interface
func makeSound(s Speaker) {
	fmt.Println(s.Speak())
}

func main() {
	dog := Dog{Name: "Buddy"}
	person := Person{Name: "Alice"}

	makeSound(dog)
	makeSound(person)
}